# sshpass 서비스 설치
- name: install ssh
  dnf:
    name: Install Time Sync Package
    state: installed

# ssh-keygen 생성
- name: ambari-server generate ssh key
  shell: /usr/bin/ssh-keygen -t rsa -m PEM -N '' -f ~/.ssh/id_rsa <<< n

# ambari-server에서 각 노드로 비밀번호 없이 접슥을 위해 ssh-copy-id 이용 공개키 복사
- name: ssh-copy-id
  vars:
    user: root
    password: "1234"
  shell: /usr/bin/sshpass -p "{{ password }}" ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no {{ user }}@{{ hostvars[item]['inventory_hostname'] }}
  loop: "{{ ansible_play_hosts }}"

# 시간 동기화 서비스 설치
- name: Install Time Sync Package
  dnf:
    name: chrony
    state: installed
  when:
    - ansible_distribution|lower == "redhat"
    - ansible_distribution_major_version|int == "8"

# chrony 서비스 설정
# TODO: allow 대역 설정
- block:
    - name: Create chrony config file
      file:
        path: /etc/chrony.conf
        state: touch
    - name: chrony config in .conf file
      lineinfile:
        path: /etc/chrony.conf
        line: "{{ item.line }}"
      loop:
        - {line: 'server localhost iburst'}
        - {line: ''}
        - {line: 'log tracking measurements statistics'}
        - {line: 'logchange 0.5'}
        - {line: ''}
        - {line: 'logdir /var/log/chrony'}
        - {line: ''}
        - {line: 'allow {{ chrony_allow }}'}

# chrony 재시작 및 부팅 시 자동 시작
- name: chrony restart, enable
  systemd:
    name: chronyd
    enabled: true
    state: restarted

# mariadb-server nodejs npm 설치 및 설정
- name: Dnf Install MariaDB, Nodejs, Npm
  dnf:
    name:
      - mariadb-server
      - nodejs
      - npm
    state: installed
  when:
    - ansible_distribution|lower == "redhat"
    - ansible_distribution_major_version|int == "8"

# MariaDB timezone 설정
- name: Set Configuration MariaDB timezone in my.cnf file
  ini_file:
    path: "/etc/my.cnf.d/server.conf"
    create: yes
    section: "mysqld"
    option: "{{ item.config_name }}"
    value: "{{ item.config_value }}"
    no_extra_spaces: yes
    state: present
  with_items:
      - {config_name: 'default-time-zone', config_value: '"+9:00"'}
      - {config_name: 'max_connections', config_value: '450'}
      - {config_name: 'wait_timeout', config_value: '300'}
      - {config_name: 'character_set_server', config_value: 'utf8'}
      - {config_name: 'character_set_database', config_value: 'utf8'}
      - {config_name: 'collation_connection', config_value: 'utf8_general_ci'}
      - {config_name: 'collation_database', config_value: 'utf8_general_ci'}
      - {config_name: 'collation_server', config_value: 'utf8_general_ci'}
  when:
    - ansible_distribution|lower == "redhat"
    - ansible_distribution_major_version|int == "8"

# MariaDB 시작
- name: MariaDB start
  systemd_service:
    name: mariadb
    enabled: true
    state: started

# mysql module 실행을 위한 관련 python 패키지 설치
- name: install python package for mysql module
  dnf:
    name: 
      - python3
      - python3-PyMySQL
    state: present
  when:
    - ansible_distribution|lower == "redhat"
    - ansible_distribution_major_version|int == "8"

# mysql_secure_installation 실행해 보았지만 실패
# mysql 기본 비밀번호 설정
- name: set mysql password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: ""
  with_items:
    - 127.0.0.1
    - ::1
    - localhost


# MariaDB 재시작 미 부팅 시 자동 시작 설정
- name: MariaDB restart, enable
  systemd:
    name: mariadb
    state: restarted

# mysql 데이터베이스 생성
- name: create mysql database
  mysql_db:
    name: 
      - ambari
      - hive
      - oozie
      - ranger
      - rangerkms
    login_user: root
    login_password: clx0261
    state: present

# mysql 계정 생성
- name: add mariadb user
  mysql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    priv: "{{ item.db_name }}.*:ALL,GRANT"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    host: "%"
    # user가 없을 경우 host_all 사용 시 오류 메시지 출력됨
    # host_all: true
    state: present
  with_items:
      - {db_name: 'ambari', user: 'ambari', password: '{{ mysql_user_password }}'}
      - {db_name: 'hive', user: 'hive', password: '{{ mysql_user_password }}'}
      - {db_name: 'oozie', user: 'oozie', password: '{{ mysql_user_password }}'}
      - {db_name: 'ranger', user: 'ranger', password: '{{ mysql_user_password }}'}
      - {db_name: 'rangerkms', user: 'rangerkms', password: '{{ mysql_user_password }}'}

# mysql-connector-java rpm 다운로드 및 설치
- block:
    - name: get mysql-connector-java rpm file
      get_url:
        url: https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-8.0.17-1.el8.noarch.rpm
        dest: /root/mysql-connector-java-8.0.17-1.el8.noarch.rpm
        headers:
          user-agent: curl/7.81.0
    - name: Install mysql-connector-java
      shell: dnf -y localinstall /root/mysql-connector-java-8.0.17-1.el8.noarch.rpm
      # dnf: 
      #   name: /root/mysql-connector-java-8.0.17-1.el8.noarch.rpm 
      #   state: present
  when:
    - ansible_distribution|lower == "redhat"
    - ansible_distribution_major_version|int == "8"

# ambari-server, ambari-agent 설치
- name: Install Ambari Server, Ambari Agent
  dnf:
    name:
      - ambari-server
      - ambari-agent
    state: installed
  when:
    - ansible_distribution|lower == "redhat"
    - ansible_distribution_major_version|int == "8"

# TODO: ambari-server 설정

# mysql-connector-java 관련 설정값 변경
- name: MySQL Connector Driver 설정값 변경
  replace:
    path: /etc/ambari-server/conf/ambari.properties
    regexp: "com.mysql.jdbc.Driver"
    replace: "com.mysql.cj.jdbc.Driver"
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] == "8"