# sshpass 서비스 설치
- name: Install Time Sync Package
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - dnf:
        name: sshpass
        state: installed

# ssh-keygen 생성
- hosts: ambari-server
  remote_user: root
  tasks:
    - name: ambari-server generate ssh key
      shell: /usr/bin/ssh-keygen -t rsa -m PEM -N '' -f ~/.ssh/id_rsa <<< n

# ambari-server에서 각 노드로 비밀번호 없이 접슥을 위해 ssh-copy-id 이용 공개키 복사
- hosts: ambari-server
  remote_user: root
  vars:
    user: root
    password: "1234"
  tasks:
    - name: ssh-copy-id
      shell: /usr/bin/sshpass -p "{{ password }}" ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no {{ user }}@{{ hostvars[item]['inventory_hostname'] }}
      loop: "{{ ansible_play_hosts }}"

# 시간 동기화 서비스 설치
- name: Install Time Sync Package
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - dnf:
        name: chrony
        state: installed

# chrony 서비스 설정
# TODO: allow 대역 설정
- name: Set Configuration chrony
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  vars:
    bandwidth: "192.168.0.0"
  tasks:
    - name: Create chrony config file
      file:
        path: /etc/chrony.conf
        state: touch
    - name: chrony config in .conf file
      lineinfile:
        path: /etc/chrony.conf
        line: "{{ item.line }}"
      loop:
        - {line: 'server localhost iburst'}
        - {line: ''}
        - {line: 'log tracking measurements statistics'}
        - {line: 'logchange 0.5'}
        - {line: ''}
        - {line: 'logdir /var/log/chrony'}
        - {line: ''}
        - {line: 'allow {{ bandwidth }}/24'}

# chrony 재시작 및 부팅 시 자동 시작
- name: chrony restart, enable
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - systemd_service:
        name: chronyd
        enabled: true
        state: restarted

# mariadb-server nodejs npm 설치 및 설정
- name: Dnf Install MariaDB, Nodejs, Npm
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - dnf:
        name:
          - mariadb-server
          - nodejs
          - npm
        state: installed

# MariaDB timezone 설정
- hosts: ambari-server
  remote_user: root
  tasks:
    - name: Set Configuration MariaDB timezone in my.cnf file
      lineinfile:
        path: /etc/my.cnf
        line: "{{ item.line }}"
      loop:
        - {line: '[mysqld]'}
        - {line: 'default-time-zone="+9:00"'}
      when:
        - ansible_facts['os_family'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "8"

# MariaDB 시작
- name: MariaDB start
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - systemd_service:
        name: mariadb
        enabled: true
        state: started

# mysql module 실행을 위한 관련 python 패키지 설치
- hosts: ambari-server
  remote_user: root
  tasks:
    - dnf:
        name: 
          - python3
          - python3-PyMySQL
        state: present
      when:
        - ansible_facts['os_family'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "8"

# TODO: mysql_secure_installation


# MariaDB 재시작 미 부팅 시 자동 시작 설정
- name: MariaDB restart, enable
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - systemd_service:
        name: mariadb
        state: restarted

# mysql 데이터베이스 생성
- hosts: test
  remote_user: root
  gather_facts: no
  tasks:
    - mysql_db:
        name: 
          - ambari
          - hive
          - oozie
          - ranger
          - rangerkms
        login_user: root
        login_password: clx0261
        state: present

# mysql 계정 생성
- name: add mariadb user
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  vars:
    mysql_login_user: "root"
    mysql_login_password: "1234"
    mysql_user_password: "1234"
  tasks:
    - mysql_user:
        name: "{{ item.user }}"
        password: "{{ item.password }}"
        priv: "{{ item.db_name }}.*:ALL,GRANT"
        login_user: "{{ mysql_login_user }}"
        login_password: "{{ mysql_login_password }}"
        host: "%"
        # user가 없을 경우 host_all 사용 시 오류 메시지 출력됨
        # host_all: true
        state: present
      with_items:
          - {db_name: 'ambari', user: 'ambari', password: '{{ mysql_user_password }}'}
          - {db_name: 'hive', user: 'hive', password: '{{ mysql_user_password }}'}
          - {db_name: 'oozie', user: 'oozie', password: '{{ mysql_user_password }}'}
          - {db_name: 'ranger', user: 'ranger', password: '{{ mysql_user_password }}'}
          - {db_name: 'rangerkms', user: 'rangerkms', password: '{{ mysql_user_password }}'}

# mysql-connector-java rpm 다운로드 및 설치
- hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - name: get mysql-connector-java rpm file
      get_url:
        url: https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-8.0.17-1.el8.noarch.rpm
        dest: /root/mysql-connector-java-8.0.17-1.el8.noarch.rpm
        headers:
          user-agent: curl/7.81.0
    - name: Install mysql-connector-java
      shell: dnf -y localinstall /root/mysql-connector-java-8.0.17-1.el8.noarch.rpm
      # dnf: 
      #   name: /root/mysql-connector-java-8.0.17-1.el8.noarch.rpm 
      #   state: present

# ambari-server, ambari-agent 설치
- name: Install Ambari Server, Ambari Agent
  hosts: ambari-server
  remote_user: root
  gather_facts: no
  tasks:
    - dnf:
        name:
          - ambari-server
          - ambari-agent
        state: installed

# TODO: ambari-server 설정

# mysql-connector-java 관련 설정값 변경
- name: MySQL Connector Driver 설정값 변경
  hosts: ambari-server
  remote_user: root
  tasks:
    - replace:
        path: /etc/ambari-server/conf/ambari.properties
        regexp: "com.mysql.jdbc.Driver"
        replace: "com.mysql.cj.jdbc.Driver"
      when:
        - ansible_facts['os_family'] == "RedHat"
        - ansible_facts['distribution_major_version'] == "8"